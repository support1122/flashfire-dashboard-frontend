import jsPDF from 'jspdf';

/**
 * Perfect Format PDF Generator - Maintains EXACT formatting of base resume
 */
export class PerfectFormatPDFGenerator {
  
  static async generatePerfectPDF(
    resumeContent: string,
    jobTitle: string,
    companyName: string
  ): Promise<Blob> {
    return new Promise((resolve, reject) => {
      try {
        console.log('üöÄ Starting Perfect Format PDF generation...');
        
        if (!resumeContent || typeof resumeContent !== 'string' || resumeContent.trim().length === 0) {
          throw new Error('Resume content is empty or invalid');
        }
        
        const pdf = new jsPDF();
        
        // Clean and parse the content to match base resume exactly
        const cleanContent = this.cleanAndStructureContent(resumeContent);
        
        console.log('üìÑ Rendering with perfect formatting...');
        
        // Render with PERFECT formatting matching base resume
        this.renderPerfectFormat(pdf, cleanContent);
        
        const pdfBlob = pdf.output('blob');
        console.log('‚úÖ Perfect format PDF generated successfully');
        resolve(pdfBlob);
      } catch (error) {
        console.error('‚ùå PDF Generation Error:', error);
        reject(new Error(`PDF generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`));
      }
    });
  }

  /**
   * Clean and structure content to match base resume exactly
   */
  private static cleanAndStructureContent(content: string): any {
    // Remove any unwanted AI-generated text
    let cleanContent = content
      .replace(/AI-Optimized Resume for.*?Generated by FLASHFIRE.*?\d{2}\/\d{2}\/\d{4}/gs, '')
      .replace(/‚Ä¢\s*Generated by FLASHFIRE.*$/gm, '')
      .replace(/Generated by FLASHFIRE.*$/gm, '')
      .replace(/###?\s*ADDITIONAL TECHNICAL SKILLS.*$/gm, '')
      .replace(/Additional Technologies:.*$/gm, '')
      .trim();

    // Parse into structured format matching base resume
    const lines = cleanContent.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    
    const structure = {
      header: {
        name: '',
        subtitle: '',
        contact: []
      },
      sections: []
    };

    let currentSection = null;
    let headerProcessed = false;

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      if (!headerProcessed && i < 5) {
        // Process header (first few lines)
        if (i === 0) {
          structure.header.name = line;
        } else if (i === 1 && !line.includes('@') && !line.includes('+') && !line.includes('|')) {
          structure.header.subtitle = line;
        } else {
          structure.header.contact.push(line);
        }
        
        // Check if we've hit a section header
        if (this.isSectionHeader(line)) {
          headerProcessed = true;
          currentSection = {
            title: line,
            content: []
          };
        }
      } else if (this.isSectionHeader(line)) {
        // Save previous section
        if (currentSection) {
          structure.sections.push(currentSection);
        }
        
        // Start new section
        currentSection = {
          title: line,
          content: []
        };
        headerProcessed = true;
      } else if (currentSection) {
        currentSection.content.push(line);
      }
    }
    
    // Add final section
    if (currentSection) {
      structure.sections.push(currentSection);
    }

    return structure;
  }

  /**
   * Check if line is a section header
   */
  private static isSectionHeader(line: string): boolean {
    const sectionKeywords = [
      'summary', 'work experience', 'skills', 'education', 'leadership & volunteering',
      'certifications', 'technical skills', 'experience', 'projects'
    ];
    
    const lowerLine = line.toLowerCase().trim();
    
    return sectionKeywords.some(keyword => 
      lowerLine === keyword || lowerLine.includes(keyword)
    ) && line.length < 60;
  }

  /**
   * Render with PERFECT formatting matching base resume exactly
   */
  private static renderPerfectFormat(pdf: jsPDF, structure: any): void {
    let yPosition = 30;
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    const maxY = pageHeight - 30;
    
    // Set font to Times New Roman (like base resume)
    pdf.setFont('times', 'normal');
    
    try {
      // Render header EXACTLY like base resume
      yPosition = this.renderPerfectHeader(pdf, structure.header, yPosition, pageWidth);
      
      // Render sections EXACTLY like base resume
      structure.sections.forEach((section: any) => {
        if (yPosition > maxY - 60) {
          pdf.addPage();
          yPosition = 30;
        }
        
        yPosition = this.renderPerfectSection(pdf, section, yPosition, margin, contentWidth, maxY, pageWidth);
      });
      
    } catch (error) {
      console.error('‚ùå Error rendering perfect format:', error);
    }
  }

  /**
   * Render header EXACTLY like base resume
   */
  private static renderPerfectHeader(pdf: jsPDF, header: any, yPosition: number, pageWidth: number): number {
    try {
      // Name - Large, bold, centered
      if (header.name) {
        pdf.setFontSize(20);
        pdf.setFont('times', 'bold');
        pdf.setTextColor(0, 0, 0);
        
        const nameWidth = pdf.getTextWidth(header.name);
        const nameX = (pageWidth - nameWidth) / 2;
        pdf.text(header.name, nameX, yPosition);
        yPosition += 15;
      }
      
      // Subtitle - Medium, centered
      if (header.subtitle) {
        pdf.setFontSize(12);
        pdf.setFont('times', 'normal');
        
        const subtitleWidth = pdf.getTextWidth(header.subtitle);
        const subtitleX = (pageWidth - subtitleWidth) / 2;
        pdf.text(header.subtitle, subtitleX, yPosition);
        yPosition += 10;
      }
      
      // Contact info - Small, centered
      pdf.setFontSize(10);
      pdf.setFont('times', 'normal');
      
      header.contact.forEach((contact: string) => {
        if (contact && contact.trim()) {
          const contactWidth = pdf.getTextWidth(contact);
          const contactX = (pageWidth - contactWidth) / 2;
          pdf.text(contact, contactX, yPosition);
          yPosition += 5;
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error rendering header:', error);
    }
    
    return yPosition + 15;
  }

  /**
   * Render section EXACTLY like base resume
   */
  private static renderPerfectSection(
    pdf: jsPDF, 
    section: any, 
    yPosition: number, 
    margin: number, 
    contentWidth: number, 
    maxY: number, 
    pageWidth: number
  ): number {
    try {
      // Section title - Bold, underlined
      pdf.setFontSize(12);
      pdf.setFont('times', 'bold');
      pdf.setTextColor(0, 0, 0);
      pdf.text(section.title.toUpperCase(), margin, yPosition);
      yPosition += 8;
      
      // Underline
      pdf.setLineWidth(1);
      pdf.setDrawColor(0, 0, 0);
      pdf.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 12;
      
      // Section content
      pdf.setFontSize(10);
      pdf.setFont('times', 'normal');
      
      section.content.forEach((line: string) => {
        if (!line || !line.trim()) {
          yPosition += 4;
          return;
        }
        
        // Check for new page
        if (yPosition > maxY - 25) {
          pdf.addPage();
          yPosition = 30;
        }
        
        try {
          if (line.startsWith('‚Ä¢') || line.startsWith('-')) {
            // Bullet points
            const bulletText = line.substring(1).trim();
            const wrappedText = pdf.splitTextToSize(`‚Ä¢ ${bulletText}`, contentWidth - 10);
            
            wrappedText.forEach((wrappedLine: string, lineIndex: number) => {
              if (yPosition > maxY - 25) {
                pdf.addPage();
                yPosition = 30;
              }
              pdf.text(wrappedLine, margin + (lineIndex > 0 ? 5 : 0), yPosition);
              yPosition += 5;
            });
          } else {
            // Regular text
            const shouldBeBold = this.shouldTextBeBold(line);
            const isRightAligned = this.shouldBeRightAligned(line);
            
            if (shouldBeBold) {
              pdf.setFont('times', 'bold');
              pdf.setFontSize(11);
            }
            
            if (isRightAligned) {
              // Right-align dates
              const textWidth = pdf.getTextWidth(line);
              pdf.text(line, pageWidth - margin - textWidth, yPosition);
              yPosition += 5;
            } else {
              const wrappedText = pdf.splitTextToSize(line, contentWidth);
              
              wrappedText.forEach((wrappedLine: string) => {
                if (yPosition > maxY - 25) {
                  pdf.addPage();
                  yPosition = 30;
                }
                pdf.text(wrappedLine, margin, yPosition);
                yPosition += 5;
              });
            }
            
            if (shouldBeBold) {
              pdf.setFont('times', 'normal');
              pdf.setFontSize(10);
            }
          }
        } catch (lineError) {
          console.error('‚ùå Error rendering line:', lineError);
          yPosition += 5;
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error rendering section:', error);
    }
    
    return yPosition + 10;
  }

  /**
   * Check if text should be bold
   */
  private static shouldTextBeBold(line: string): boolean {
    return (
      (line.includes('Manager') || line.includes('Intern') || line.includes('Coordinator') || 
       line.includes('Advisor') || line.includes('Senator') || line.includes('Associate') ||
       line.includes('University') || line.includes('Bachelor') || line.includes('Master')) &&
      !line.includes('‚Ä¢') && 
      line.length < 100
    );
  }

  /**
   * Check if text should be right-aligned
   */
  private static shouldBeRightAligned(line: string): boolean {
    return (
      line.match(/\b(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{4}/) ||
      line.match(/\d{4}\s*‚Äî\s*\d{4}/) ||
      line.match(/\d{4}\s*‚Äî\s*(Present|Current)/)
    ) && line.length < 50;
  }
}

export async function generatePerfectFormatPDF(
  resumeContent: string,
  jobTitle: string,
  companyName: string
): Promise<Blob> {
  return PerfectFormatPDFGenerator.generatePerfectPDF(resumeContent, jobTitle, companyName);
}

export function downloadPDF(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}